jar.enabled = false

sourceSets {
    test {
        java {
            srcDirs = ['src/test/java']
        }
        resources {
            srcDirs = ['src/test/resources']
        }
    }
}

dependencies {
    testCompile group: "org.intermine", name: "intermine-objectstore", version: imVersion
    testCompile 'commons-lang:commons-lang:2.6'
}

configurations {
    testBioArtifacts
}

void generateModel(model, destination, type) {
    //retrieve model form database
    ant.taskdef(name: 'retrieveModelTask', classname: 'org.intermine.task.RetrieveMetadataTask') {
        classpath {
            dirset(dir: 'src/test/resources/') //to be able to load default.itermine.properties
            dirset(dir: 'build/resources/test/')
            pathelement(path: configurations.testCompile.asPath)
        }
    }
    ant.retrieveModelTask(osName: 'os.bio-test', destDir: 'build/resources/test/')

    //generate the java classes
    ant.taskdef(name: 'modelOutputTask', classname: 'org.intermine.task.ModelOutputTask') {
        classpath {
            dirset(dir: 'src/test/resources/')
            dirset(dir: 'build/resources/test/')
            pathelement(path: configurations.testCompile.asPath)
        }
    }    
    ant.modelOutputTask(model: model, destDir: destination, type: type)
}

task generateBioModel {
    doLast {
        generateModel('genomic', 'src/test/java', 'java')
    }   
}

task copyBioTestProperties(type: Copy) {
    from "${System.env.HOME}/.intermine/intermine-bio-test.properties"
    into sourceSets.test.output.resourcesDir

    rename { fileName -> fileName.replace('intermine-bio-test.properties', 'intermine.properties') }

    inputs.sourceFiles.stopExecutionIfEmpty()
}

task buildBioModelJar(type: Jar) {
    from(sourceSets.test.output)
}

tasks.compileTestJava.dependsOn 'generateBioModel'
tasks.buildBioModelJar.dependsOn 'copyBioTestProperties', 'testClasses'

artifacts {
    testBioArtifacts buildBioModelJar
}
