apply plugin: 'database'
apply plugin: 'minedb'

sourceSets {
    main {
        java {
            srcDirs = ['build/gen']
        }
        resources {
            srcDirs = ['resources']
        }
    }
}

configurations {
    compile
    commonResources
}

dependencies {
    compile group: "org.intermine", name: "intermine-objectstore", version: imVersion
    compile fileTree(dir: 'libs', include: '*.jar')
    commonResources group: "org.intermine", name: "intermine-resources", version: imVersion
}

dbConfig {
    objectStoreName = "os.production"
    modelName = "genomic"
    defaultInterminePropertiesFile = "default.intermine.integrate.properties"
    soTermListFilePath = "dbmodel/resources/so_terms"
    soAdditionFilePath = "dbmodel/build/so_additions.xml"
}

mineDBConfig {
    modelName = "genomic"
    extraModelsStart = "so_additions.xml genomic_additions.xml"
    extraModelsEnd = ""
}

task copyModelProperties(type: Copy) {
    println "Using properties file: '$minePropertyFile'"
    description "Copies mine specific intermine.properties file (from .intermine directory) into resources output to be included in the war"
    dependsOn 'processResources'

    def db_username = System.getenv('USER')
    def db_pw = System.getenv('USER')

    // use ENV VARs instead if they've set them. need for travis
    if (System.getenv('PSQL_USER')) {
        db_username = System.getenv('PSQL_USER')
    }
    if (System.getenv('PSQL_PWD')) {
        db_pw = System.getenv('PSQL_PWD')
    }

    from (minePropertyFile) {
        filter{String line -> line.replaceAll('PSQL_USER', db_username)}
        filter{String line -> line.replaceAll('PSQL_PWD', db_pw)}
    }
    into sourceSets.main.output.resourcesDir
    rename { fileName -> fileName.replace("$minePropertyFileName", "intermine.properties") }
    inputs.sourceFiles.stopExecutionIfEmpty()
}
