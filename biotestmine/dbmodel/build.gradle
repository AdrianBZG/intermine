sourceSets {
    main {
        java {
            srcDirs = ['build/gen']
        }
        resources {
            srcDirs = ['resources']
        }
    }
}

configurations {
  compile
  so
  bioCore
  mergeSource
  commonResources
}

dependencies {
    compile group: "org.intermine", name: "intermine-objectstore", version: imVersion
    so group: "org.intermine", name: "so", version: bioVersion
    so fileTree(dir: "libs", include: "*.jar")
    mergeSource group : "org.intermine", name: "ant-tasks", version: antVersion
    mergeSource group : "org.intermine", name: "uniprot", version: bioVersion
    mergeSource group : "org.intermine", name: "fasta", version: bioVersion
    mergeSource group : "org.intermine", name: "go-annotation", version: bioVersion
    bioCore group : "org.intermine", name: "bio-core", version: bioVersion, transitive: false
    commonResources group: "org.intermine", name: "intermine-resources", version: imVersion
}

apply plugin: 'database'

dbConfig {
  objectStoreName = "os.production"
  modelName = "genomic"
  soTermListFilePath = "dbmodel/resources/so_terms"
  soAdditionFilePath = "dbmodel/build/so_additions.xml"
  extraModelsStart = "so_additions.xml genomic_additions.xml"
  extraModelsEnd = ""
}

processResources {
  dependsOn "copyModelProperties"
}

compileJava {
  dependsOn "generateModel"
}

task copyModelProperties(type: Copy) {
    println "Using properties file: '$minePropertyFile'"
    description "Copies mine specific intermine.properties file (from .intermine directory) into resources output to be included in the war"

    def db_username = System.getenv('USER')
    def db_pw = System.getenv('USER')

    // use ENV VARs instead if they've set them. need for travis
    if (System.getenv('PSQL_USER')) {
        db_username = System.getenv('PSQL_USER')
    }
    if (System.getenv('PSQL_PWD')) {
        db_pw = System.getenv('PSQL_PWD')
    }

    from (minePropertyFile) {
        filter{String line -> line.replaceAll('PSQL_USER', db_username)}
        filter{String line -> line.replaceAll('PSQL_PWD', db_pw)}
    }
    into sourceSets.main.output.resourcesDir
    rename { fileName -> fileName.replace("$minePropertyFileName", "intermine.properties") }
    inputs.sourceFiles.stopExecutionIfEmpty()
}
