apply plugin: "antlr"

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java', 'build/generated-src/antlr/main']
        }
        resources {
            srcDirs = ['src/main/resources']
        }
        antlr {
            srcDirs = ['src/main/antlr']
        }
    }

    test {
        java {
            srcDirs = ['src/test/java']
        }
        resources {
            srcDirs = ['src/test/resources']
        }
    }
}

configurations {
    provided
    compile.extendsFrom provided
}

dependencies {
    testCompile project(path: ':intermine-testresources', configuration: 'testArtifacts')
    testCompile project(':intermine-resources')
    compile project(':intermine-model')
    compile group: 'org.postgresql', name: 'postgresql', version: '9.4.1212'
    compile group: 'commons-io', name: 'commons-io', version: '1.2'
    compile group: 'commons-beanutils', name: 'commons-beanutils', version: '1.6.1'
    compile group: 'com.zaxxer', name: 'HikariCP-java6', version: '2.3.8'
    compile group: 'net.iharder', name: 'base64', version: '2.3.8' //not clear wich version is currently used
    compile group: 'au.com.bytecode', name: 'opencsv', version: '2.4' //version 2.3 not available in maven
    compile group: 'org.ow2.asm', name: 'asm', version: '4.2'
    compile group: 'mockobjects', name: 'mockobjects-core', version: '0.09'
    compile group: 'mockobjects', name: 'mockobjects-jdk1.3', version: '0.09'
    provided fileTree(dir: 'libs', include: '*.jar') // eventually replace torque
    runtime group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.7'
//    testCompile project(':intermine-testresources').sourceSets.test.output
//    testCompile project(':intermine-resources').sourceSets.test.output
}

jar {
    dependsOn configurations.runtime
    // put all the JARs included in `provided` config and include them in the JAR
    from {
        (configurations.provided).collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
}

void buildTestModelDatabase() {
    ant.taskdef(name: 'torque', classname: 'org.intermine.objectstore.intermine.TorqueModelOutputTask') {
        classpath {
            dirset(dir: "$buildDir")
            pathelement(path: configurations.testCompile.asPath)
        }
    }
    ant.torque(osname: 'os.unittest', destFile:"$buildDir/os.unittest-schema.xml")
    ant.taskdef(name: 'buildDBUnittest', classname: 'org.intermine.task.BuildDbTask') {
        classpath {
            fileset(dir: "$buildDir")
            dirset(dir: "$buildDir/resources/test")
            pathelement(path: configurations.compile.asPath)
            pathelement(path: configurations.testCompile.asPath)
        }
    }
    ant.buildDBUnittest(osname: 'os.unittest', model: 'testmodel', schemafile:"$buildDir/os.unittest-schema.xml", tempDir: "$buildDir/tmp")
    // <analyse-db osName="${objectstore.name}"/>
}

// build unittest.
task buildTestModelDB() {
    description "Build database for intermine-tests"
    doLast {
        buildTestModelDatabase()
    }
}

// create databases if not there
task createUnitTestDatabases(type:Exec) {
    // ignore errors because databases may already exist
    ignoreExitValue true
    commandLine 'psql', '-h', 'localhost', '-d', 'postgres', '-c', "create database notxmltest;"
    commandLine 'psql', '-h', 'localhost', '-d', 'postgres', '-c', "create database truncunittest;"
    commandLine 'psql', '-h', 'localhost', '-d', 'postgres', '-c', "create database flatmodetest;"
    commandLine 'psql', '-h', 'localhost', '-d', 'postgres', '-c', "create database fulldatatest;"
    commandLine 'psql', '-h', 'localhost', '-d', 'postgres', '-c', "create database userprofiletest;"
    commandLine 'psql', '-h', 'localhost', '-d', 'postgres', '-c', "create database unittest;"
    commandLine 'psql', '-h', 'localhost', '-d', 'postgres', '-c', "create database biotest;"
    commandLine 'psql', '-h', 'localhost', '-d', 'postgres', '-c', "create database biofulldatatest;"
}

//tasks.compileTestJava.dependsOn 'buildTestModelDB'
tasks.buildTestModelDB.dependsOn 'createInterMineProperties'