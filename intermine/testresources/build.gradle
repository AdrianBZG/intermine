// Prevent the build target from building an empty compile jar
// we only have testCompile classes and we want them to be in the jar instead via the buildTestModelJar target
jar.enabled = false

sourceSets {
    test {
        java {
            srcDirs = ['src/test/java']
        }
        resources {
            srcDirs = ['src/test/resources']
        }
    }
}

dependencies {
    testCompile project(':intermine-objectstore')
    testCompile project(':intermine-resources')
    testCompile 'commons-lang:commons-lang:2.6'
}

configurations {
    testArtifacts
}

void generateModel(model, destination, type) {
    ant.taskdef(name: 'modelOutputTask', classname: 'org.intermine.task.ModelOutputTask') {
        classpath {
            fileset(dir: '../model/build/libs/', includes: '*.jar')
            dirset(dir: 'src/test/resources/')
            pathelement(path: configurations.testCompile.asPath)
        }
    }   

    ant.modelOutputTask(model: model, destDir: destination, type: type)
}

task generateTestModel {
    description "generate the testmodel Java files from the data model, eg. Employee.java"
    doLast {
        generateModel('testmodel', 'src/test/java', 'java')
    }
}

void insertDataModel(model, osname) {
    ant.taskdef(name: 'insertModelTask', classname: 'org.intermine.task.StoreMetadataTask') {
        classpath {
            fileset(dir: '../model/build/libs/', includes: '*.jar')
            dirset(dir: 'src/test/resources/')
            dirset(dir: 'build/') // intermine.properties
            pathelement(path: configurations.testCompile.asPath)
        }
    }

    ant.insertModelTask(osname: osname, modelName: model)
}

task insertModel (dependsOn: 'buildDB') {
    description "put the generated model file into the intermine_metadata table"
    doLast {
        insertDataModel('testmodel', 'os.unittest')
    }
}

class CreateInterMinePropertiesTask extends DefaultTask {

    def resourcesDir = "$project.rootDir/testresources/src/test/resources"

    @OutputDirectory File outputDir = new File("$project.rootDir/testresources/build", "")

    @InputFile File inputFile = new File("$resourcesDir/intermine-test.properties")

    @TaskAction
    public void generate() {
        File outputFile = new File(outputDir, "intermine.properties")

        String contents = inputFile.getText('UTF-8')

        // create databases using their UNIX name
        def db_username = System.getenv('USER')
        def db_pw = System.getenv('USER')

        // use ENV VARs instead if they've set them. need for travis
        if (System.getenv('PSQL_USER')) {
            db_username = System.getenv('PSQL_USER')
        }
        if (System.getenv('PSQL_PWD')) {
            db_username = System.getenv('PSQL_PWD')
        }

        contents = contents.replaceAll( 'PSQL_USER', db_username)
        contents = contents.replaceAll( 'PSQL_PWD', db_pw)

        outputFile.text = contents
    }
}

task createInterMineProperties(type: CreateInterMinePropertiesTask) {
    description "Creates properties file to use for unit tests"
}

task buildTestModelJar(type: Jar) {
    from(sourceSets.test.output)
}

task createUnitTestDatabases {
    description "create databases needed for unit tests"
    doLast {
        exec {
            // just fail silently if DB is already there. Instead we could read in the list of DBs and only
            // create ones that aren't there
            ignoreExitValue true
            commandLine 'psql', '-h', 'localhost', '-d', 'postgres', '-c', "create database notxmltest;"
        }
        exec {
            ignoreExitValue true
            commandLine 'psql', '-h', 'localhost', '-d', 'postgres', '-c', "create database truncunittest;"
        }
        exec {
            ignoreExitValue true
            commandLine 'psql', '-h', 'localhost', '-d', 'postgres', '-c', "create database flatmodetest;"
        }
        exec {
            ignoreExitValue true
            commandLine 'psql', '-h', 'localhost', '-d', 'postgres', '-c', "create database fulldatatest;"
        }
        exec {
            ignoreExitValue true
            commandLine 'psql', '-h', 'localhost', '-d', 'postgres', '-c', "create database userprofiletest;"
        }
        exec {
            ignoreExitValue true
            commandLine 'psql', '-h', 'localhost', '-d', 'postgres', '-c', "create database unittest;"
        }
        exec {
            ignoreExitValue true
            commandLine 'psql', '-h', 'localhost', '-d', 'postgres', '-c', "create database biotest;"
        }
        exec {
            ignoreExitValue true
            commandLine 'psql', '-h', 'localhost', '-d', 'postgres', '-c', "create database biofulldatatest;"
        }
    }
}

// this only works correctly after you stop the gradlew process. --stop. otherwise it keeps the connection to unittest
// this is incorrect as the tests should drop the database connections themselves
task dropDBs {
    description "drop all the test databases. used for debugging only."
    doLast {
        exec {
            // just fail silently if DB is already there. Instead we could read in the list of DBs and only
            // create ones that aren't there
            ignoreExitValue true
            commandLine 'psql', '-h', 'localhost', '-d', 'postgres', '-c', "drop database notxmltest;"
        }
        exec {
            ignoreExitValue true
            commandLine 'psql', '-h', 'localhost', '-d', 'postgres', '-c', "drop database truncunittest;"
        }
        exec {
            ignoreExitValue true
            commandLine 'psql', '-h', 'localhost', '-d', 'postgres', '-c', "drop database flatmodetest;"
        }
        exec {
            ignoreExitValue true
            commandLine 'psql', '-h', 'localhost', '-d', 'postgres', '-c', "drop database fulldatatest;"
        }
        exec {
            ignoreExitValue true
            commandLine 'psql', '-h', 'localhost', '-d', 'postgres', '-c', "drop database userprofiletest;"
        }
        exec {
            ignoreExitValue true
            commandLine 'psql', '-h', 'localhost', '-d', 'postgres', '-c', "drop database unittest;"
        }
        exec {
            ignoreExitValue true
            commandLine 'psql', '-h', 'localhost', '-d', 'postgres', '-c', "drop database biotest;"
        }
        exec {
            ignoreExitValue true
            commandLine 'psql', '-h', 'localhost', '-d', 'postgres', '-c', "drop database biofulldatatest;"
        }
    }
}

void createTables(osname, model) {
    ant.taskdef(name: 'buildDBUnittest', classname: 'org.intermine.task.BuildDbTask') {
        classpath {
            pathelement(path: configurations.testCompile.asPath)
            dirset(dir: 'build/') // testmodel classes and schemas
            dirset(dir: 'src/test/resources/') // testmodel classes and schemas
        }
    }
    ant.buildDBUnittest(osname: "os.$osname", model: "$model", schemafile:"os.$osname-schema.xml", tempDir: "$buildDir/tmp")
    // <create-indexes alias="${objectstore.name}" />
    // <analyse-db osName="${objectstore.name}"/>
}

void generateSchema(osname, model) {
    ant.taskdef(name: 'torque', classname: 'org.intermine.objectstore.intermine.TorqueModelOutputTask') {
        classpath {
            pathelement(path: configurations.testCompile.asPath)
            dirset(dir: 'build/') // testmodel classes and intermine.properties
            dirset(dir: 'src/test/resources') // testmodel_model.xml
        }
    }
    ant.torque(osname: "os.$osname", destFile:"$buildDir/os.$osname-schema.xml")
}

task buildDB {
    dependsOn 'createUnitTestDatabases'
    dependsOn 'generateTestModel'
    dependsOn 'createInterMineProperties'
    description "Create tables for database for intermine tests"
    doLast {
        generateSchema('unittest', 'testmodel')
        createTables('unittest', 'testmodel')

        generateSchema('truncunittest', 'testmodel')
        createTables('truncunittest', 'testmodel')

        generateSchema('notxmlunittest', 'testmodel')
        createTables('notxmlunittest', 'testmodel')

        generateSchema('flatmodeunittest', 'testmodel')
        createTables('flatmodeunittest', 'testmodel')

        // don't need to generate schema, never changes
        createTables('fulldatatest', 'fulldata')
    }
}

// create unit databases, generate model > compile (need .class files) > build db > insert data model
tasks.compileTestJava.dependsOn('generateTestModel')
tasks.buildDB.shouldRunAfter('compileTestJava')
tasks.buildTestModelJar.dependsOn 'createInterMineProperties', 'testClasses', 'buildDB', 'insertModel'

artifacts {
    testArtifacts buildTestModelJar
}
