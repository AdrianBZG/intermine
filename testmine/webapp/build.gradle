apply plugin: "war"
apply from: "https://raw.github.com/akhikhl/gretty/master/pluginScripts/gretty.plugin"

def explodedWebAppDir = "$buildDir/explodedWebApp"
def mergePropsDir = "$buildDir/props"

// duplicate of code from testmodel-db
ext {
    // suffix for property file. might be blank
    mineRelease = hasProperty('release') ? "." + release : ''
    // filename for property file
    minePropertyFileName = "testmodel.properties$mineRelease"
    // full path to file
    minePropertyFile = "${System.env.HOME}/.intermine/$minePropertyFileName"
    // NO PROPERTY FILE -- use the default
    if( !file(minePropertyFile).exists() ) {
        minePropertyFile = "$project.rootDir/dbmodel/resources/testmodel.properties"
    }
}

configurations {
    commonResources
    imWebApp
}

dependencies { 
    compile project(":dbmodel")
    compile group: "org.intermine", name: "intermine-webapp", version: imVersion, classifier: "classes"
    compile group: "org.intermine", name: "intermine-api", version: imVersion
    compile group: "javax.servlet", name: "jstl", version: "1.2"
    compile group: "org.apache.struts", name: "struts-core", version: "1.3.10"
    commonResources group: "org.intermine", name: "intermine-resources", version: imVersion
    imWebApp group: "org.intermine", name: "intermine-webapp", version: imVersion, ext: "war"
}

processResources {
    exclude "default-template-queries.xml"
    exclude "main/"
    dependsOn "copyDefaultProperties", "copyModelProperties"
}

task copyDefaultProperties(type: Copy) {
    description "Copies default.intermine.properties file (from resources project) into resources output to be included in the war"
    from({ zipTree(configurations.commonResources.singleFile) }) {
        include "default.intermine.test.properties"
    }
    into sourceSets.main.output.resourcesDir
    rename { fileName -> fileName.replace("default.intermine.test.properties", "default.intermine.properties") }
}

task copyModelProperties(type: Copy) {
    description "Copies mine specific intermine.properties file into resources output to be included in the war."
    from project.parent.project(':dbmodel').sourceSets.main.output.resourcesDir.absolutePath + "/intermine.properties"
    into sourceSets.main.output.resourcesDir
}

war {
    exclude "WEB-INF/web.properties"
    webInf { from "${mergePropsDir}" }


    doFirst {
        tasks.mergeProperties.execute();
        tasks.summariseTestObjectStore.execute()
    }

    doLast {
        unwarIMWebApp.execute()
        warTestModelWebApp.execute()
    }
}

task mergeProperties(type: Copy) {
    description "Appendes intermine.properties to web.properties file"
    from "${webAppDirName}/WEB-INF/web.properties"
    into "${mergePropsDir}"
    doLast {
        def intermineProperties = project.parent.project(':dbmodel').sourceSets.main.output.resourcesDir.absolutePath + "/intermine.properties"
        (new File("$mergePropsDir/web.properties")).append( (new File("$intermineProperties")).getText())
    }   
}

// this task requires a database to exist and be populated. However this task is run at compile time, not runtime.
// We have no guarantee there will be a database. Hence the try/catch
task summariseTestObjectStore {
    description "Summarise Test model ObjectStore into objectstoresummary.properties file"
    doLast {
        try {
            ant.taskdef(name: "summarizeObjectStoreTask", classname: "org.intermine.task.SummariseObjectStoreTask") {
                classpath {
                    pathelement(path: configurations.compile.asPath)
                }
            }
            ant.summarizeObjectStoreTask(alias: "os.unittest", configFileName: "objectstoresummary.config.properties", outputFile: "build/props/objectstoresummary.properties")
        } catch (Exception e) {
            println "ERROR" + e
        }
    }
}

task unwarIMWebApp(type: Copy) {
    description "Unwar intermine-webapp under the build/explodedWebAppDir directory"
    from { zipTree(configurations.imWebApp.singleFile) }
    destinationDir = new File("$explodedWebAppDir")
}

task warTestModelWebApp(type: War) {
    description "Create the war from the build/explodedWebAppDir directory"
    from "${explodedWebAppDir}"
    exclude "WEB-INF/web.properties"
    webInf { from "${mergePropsDir}" }
}

gretty {
    // needed for Tomcat 8.0.x, Maybe remove for Tomcat 9? Still needed for Tomcat 8.5.x?
    jvmArgs = ['-Dorg.apache.el.parser.SKIP_IDENTIFIER_CHECK=true']

    // read in intermine.properties to get the contextPath
    def props = new Properties()
    file(minePropertyFile).withInputStream { props.load(it) }

    // needed to deploy the webapp
    contextPath = props.getProperty("webapp.path")
}

