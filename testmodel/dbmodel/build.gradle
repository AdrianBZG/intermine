apply plugin: 'idea'

sourceSets {
    main {
        resources {
            srcDirs = ['resources']
        }
    }
}

configurations {
    compile
}

dependencies {
    compile group: "org.intermine", name: "intermine-objectstore", version: version
    //compile fileTree(dir: 'libs', include: '*.jar')
    compile group: "org.intermine", name: "intermine-testresources", version: version
    compile group: "org.intermine", name: "intermine-integrate", version: version
}

void buildDB() {
    println configurations.compile.asPath
    ant.taskdef(name: 'torque', classname: 'org.intermine.objectstore.intermine.TorqueModelOutputTask') {
        classpath {
            pathelement(path: configurations.compile.asPath)
        }
    }
    ant.torque(osname: 'os.unittest', destFile:"$buildDir/os.unittest-schema.xml")
    ant.taskdef(name: 'buildDBUnittest', classname: 'org.intermine.task.BuildDbTask', classpath:configurations.compile.asPath)
            {
                classpath {
                    dirset(dir: 'build/')
                }
            }
    ant.buildDBUnittest(osname: 'os.unittest', model: 'testmodel', schemafile:"os.unittest-schema.xml", tempDir: "$buildDir/tmp")
    // <create-indexes alias="${objectstore.name}" />
    // <analyse-db osName="${objectstore.name}"/>
}

void insertDUnittest() {
    // TODO this
    // <delete file="${objectstoresummary.properties}"/>
   ant.taskdef(name: 'insertDataUnittest', classname: 'org.intermine.dataloader.XmlDataLoaderTask', classpath:configurations.compile.asPath)
            {
                classpath {
                    dirset(dir: 'build/')
                    dirset(dir: 'resources/')
                }
            }
    ant.insertDataUnittest(integrationWriter: 'integration.unittestmulti', xmlResource: "testmodel_webapp_data.xml", sourceName: "testsource", sourceType: "testsource")
}

task insertDataUnittest {
    doLast {
        buildDB()
        insertDUnittest()
   }
}

task buildDataBase {
    doLast {
        buildDB()
   }
}
