apply plugin: "war"
apply from: "https://raw.github.com/akhikhl/gretty/master/pluginScripts/gretty.plugin"

sourceSets {
    main {
        java {
            srcDirs = ["src/main/java"]
        }
        resources {
            srcDirs = ["src/main/resources"]
        }
    }
    test {
        java {
            srcDirs = ["src/test/java"]
        }
        resources {
            srcDirs = ["src/test/resources"]
        }
    }
}


def explodedWebAppDir = "$buildDir/explodedWebApp"
def mergePropsDir = "$buildDir/props"


ext {
    // suffix for property file. might be blank
    mineRelease = hasProperty('release') ? "." + release : ''
    // filename for property file
    minePropertyFileName = "testmodel.properties$mineRelease"
    // full path to file
    minePropertyFile = "${System.env.HOME}/.intermine/$minePropertyFileName"
    // people can have a testmodel.properties file in .intermine. if it aint there, just use the default one
    if( !file(minePropertyFile).exists() ) {
        minePropertyFile = "$project.rootDir/webapp/src/test/resources/testmodel.properties"
    }
}

configurations {
  commonResources
  imWebApp
}

dependencies { 
  compile project(":testmodel-db")
  compile group: "org.intermine", name: "intermine-webapp", version: imVersion, classifier: "classes"
  compile group: "org.intermine", name: "intermine-api", version: imVersion
  compile group: "javax.servlet", name: "jstl", version: "1.2"
  compile group: "org.apache.struts", name: "struts-core", version: "1.3.10"
  commonResources group: "org.intermine", name: "intermine-resources", version: imVersion
  imWebApp group: "org.intermine", name: "intermine-webapp", version: imVersion, ext: "war"
}

processResources {
  exclude "default-template-queries.xml"
  exclude "main/"
  dependsOn "copyDefaultProperties", "createInterMineProperties"
}

task copyDefaultProperties(type: Copy) {
    description "Copies intermine.default.properties file (from resources project) into resources output to be included in the war"
    from({ zipTree(configurations.commonResources.singleFile) })
    into sourceSets.main.output.resourcesDir
}

//task copyTestModelProperties(type: Copy) {
//    description "Copies mine specific intermine.properties file (from .intermine directory) into resources output to be included in the war. If it's not there it uses the dummy properties"
//    println "Using properties file: '$minePropertyFile'"
//    from minePropertyFile
//    into sourceSets.main.output.resourcesDirectory
//    rename { fileName -> fileName.replace("testmodel.properties$mineRelease", "intermine.properties") }
//    inputs.sourceFiles.stopExecutionIfEmpty()
//}

task createInterMineProperties(type: CreateInterMinePropertiesTask) {
    description "Creates testmodel properties file to use for testmodel"
}

// ***********************************************************
// this is a (almost) duplicate of a class in intermine-testresources
// put in intermine plugin instead?
// ***********************************************************
class CreateInterMinePropertiesTask extends DefaultTask {

    @OutputDirectory File outputDir = new File("$project.rootDir/webapp/src/main/resources", "")

    @InputFile File inputFile = new File("" + project.minePropertyFile)

    @TaskAction
    public void generate() {

        File outputFile = new File(outputDir, "intermine.properties")

        String contents = inputFile.getText('UTF-8')

        // this part is ignored if .intermine/testmodel.properties is used
        // create databases using their UNIX name
        def db_username = System.getenv('USER')
        def db_pw = System.getenv('USER')

        // use ENV VARs instead if they've set them. need for travis
        if (System.getenv('PSQL_USER')) {
            db_username = System.getenv('PSQL_USER')
        }
        if (System.getenv('PSQL_PWD')) {
            db_username = System.getenv('PSQL_PWD')
        }

        contents = contents.replaceAll( 'PSQL_USER', db_username)
        contents = contents.replaceAll( 'PSQL_PWD', db_pw)

        outputFile.text = contents
    }
}

war {
  exclude "WEB-INF/web.properties"
  webInf { from "${mergePropsDir}" }

  doFirst {
    tasks.mergeProperties.execute();
    tasks.summariseTestObjectStore.execute()
  }

  doLast {
    unwarIMWebApp.execute()
    warTestModelWebApp.execute()	
  }
}

task mergeProperties(type: Copy) {
    group "${taskGroup}"
    description "Appendes intermine.properties to web.properties file"
    from "${webAppDirName}/WEB-INF/web.properties"
    into "${mergePropsDir}"
    doLast {
      (new File("$mergePropsDir/web.properties")).append( (new File("$buildDir/resources/main/intermine.properties")).getText())
    }   
}

task summariseTestObjectStore {
    group "${taskGroup}"
    description "Summarise Test model ObjectStore into objectstoresummary.properties file"
    doLast {
      ant.taskdef(name: "summarizeObjectStoreTask", classname: "org.intermine.task.SummariseObjectStoreTask") {
        classpath {
          pathelement(path: configurations.compile.asPath)
        }   
      }    
      ant.summarizeObjectStoreTask(alias: "os.unittest", configFileName: "objectstoresummary.config.properties", outputFile: "build/props/objectstoresummary.properties")
    }
}

task unwarIMWebApp(type: Copy) {
  group "${taskGroup}"
  description "Unwar intermine-webapp under the build/explodedWebAppDir directory"
  from { zipTree(configurations.imWebApp.singleFile) }
  destinationDir = new File("$explodedWebAppDir")
}

task warTestModelWebApp(type: War) {
  group "${taskGroup}"
  description "Create the war from the build/explodedWebAppDir directory"
  from "${explodedWebAppDir}"
  exclude "WEB-INF/web.properties"
  webInf { from "${mergePropsDir}" }
}

// read in testmodel.properties to get the contextPath
// the properties files are read in much later but we need this variable set in props
// to deploy webapp
// TODO this need to happen AFTER the file is formatted
def props = new Properties()
file(project.minePropertyFile).withInputStream { props.load(it) }

gretty {
    // needed for Tomcat 8.0.x, Maybe remove for Tomcat 9? Still needed for Tomcat 8.5.x?
    jvmArgs = ['-Dorg.apache.el.parser.SKIP_IDENTIFIER_CHECK=true']
    // needed to deploy the webapp
    contextPath = props.getProperty("webapp.path")
}

